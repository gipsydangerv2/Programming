#include<iostream>
#include<vector>
#include<list>
#include<climits>
#include<queue>
using namespace std;
struct compare{
    bool operator()(const pair<int,int> &a,const pair<int,int>&b){
        return a>b;
    }
};
vector<int> dks(vector<list<pair<int,int>>> graph,int src){
    priority_queue<pair<int,int>,vector<pair<int,int>>,compare>pq;
    vector<int>distance(graph.size(),INT_MAX);
    vector<bool>visited(graph.size(),false);
    pq.push(make_pair(0,src));
    distance[src]=0;
    while(!pq.empty()){
        pair<int,int>curr = pq.top();pq.pop();
        if(visited[curr.second]==false){
            visited[curr.second]=true;
            for(list<pair<int,int>>::iterator it=graph[curr.second].begin();it!=graph[curr.second].end();it++){
                if(distance[it->first]>distance[curr.second]+it->second){
                    distance[it->first]=distance[curr.second]+it->second;
                    pq.push(make_pair(distance[it->first],it->first));
                }
            }
        }
    }
    return distance;
}
int main(){
    vector<list<pair<int,int>>>graph;
    int edge,vert,src,dest,wght;
    cout<<"Edges and Vertices\n";
    cin>>edge>>vert;
    graph.resize(vert);
    for(int i=0;i<edge;i++){
        cin>>src>>dest>>wght;
        graph[src].push_back(make_pair(dest,wght));
    }
    cout<<"Source Vertex:";
    cin>>src;
    vector<int>distance = dks(graph,src);
    for(int i=0;i<vert;i++){
        cout<<"0 "<<i<<" "<<distance[i]<<endl;
    }
    return 0;
}
